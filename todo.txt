* prevent OGRE log stdout output
* void xxx::begin(XXX& ) -> uint xxx::begin(XXX& ), returning 0 on complete or number of calls left? (interactive loading)
* continous save to file (YAML, save())
* custom CMakeBuild of tinyxml2
* base event class (Game::), implement for Run/Race/Forest/... 
  true iff handled??
* implement Log: current indentation, error/warning tags, etc
* compile_sh -> build (clean, pull-submodules) 
* implement batb/gui/tb_system.cpp, in a platform independent way.
* invariant: shutting down module (end) indepodent. shutting down stuff shall set pointers to nullptr.
* stb_image as individual module (currently using the one from nanovg..). used by nanovg, turbobadger
* FPS and other BATB-stats
* glext.h (part of official OpenGL Registry) as git submodule, or something
* use C++11 coding actively. see for example:
    http://blog.smartbear.com/c-plus-plus/the-biggest-changes-in-c11-and-why-you-should-care/
    http://www.codeproject.com/Articles/570638/Ten-Cplusplus-Features-Every-Cplusplus-Developer
* define invariants (OpenGL, ...)
* Define gameobjects more preciseand start to implement them
* find a suitable UDP-library (http://www.codeofhonor.com/blog/choosing-a-game-network-lib)
* GLEW as git submodule 
* get more developers involved!
